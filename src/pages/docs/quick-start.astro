---
import DocsLayout from '../../layouts/DocsLayout.astro';
import CodeBlock from '../../components/CodeBlock.astro';
---

<DocsLayout title="Quick Start" currentPage="/docs/quick-start">
  <h1>Quick Start Guide</h1>
  
  <p class="lead text-lg text-neutral-600 dark:text-neutral-400 mb-8">
    This guide will help you build a simple API with FrameAPI in just a few minutes. We'll create a basic RESTful API for managing a collection of books.
  </p>
  
  <h2>Create a New Project</h2>
  
  <p>
    If you haven't already created a project, follow the <a href="/docs/installation">installation guide</a> to set up a new FrameAPI project.
  </p>
  
  <h2>Project Structure</h2>
  
  <p>
    For this quick start guide, we'll use the following project structure:
  </p>
  
  <CodeBlock language="text">
my-book-api/
├── src/
│   ├── controllers/
│   │   └── books.controller.js
│   ├── models/
│   │   └── book.model.js
│   ├── routes/
│   │   └── books.routes.js
│   └── app.js
├── .env
└── package.json
  </CodeBlock>
  
  <h2>Set Up the Main Application</h2>
  
  <p>
    First, let's set up the main application file:
  </p>
  
  <CodeBlock language="javascript" title="src/app.js">
const { createServer } = require('frame-api');
const bookRoutes = require('./routes/books.routes');

// Create a new application
const app = createServer();

// Set up middleware
app.use(require('frame-api/middleware/cors'));
app.use(require('frame-api/middleware/bodyParser').json());
app.use(require('frame-api/middleware/compression')());

// Set up routes
app.use('/api', bookRoutes);

// Define an error handler
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({
    error: 'Something went wrong!',
    message: err.message
  });
});

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  console.log(`API available at http://localhost:${PORT}/api/books`);
});
  </CodeBlock>
  
  <h2>Create a Model</h2>
  
  <p>
    Next, let's create a simple model for our books:
  </p>
  
  <CodeBlock language="javascript" title="src/models/book.model.js">
// For this quick start, we'll use a simple in-memory store
// In a real application, you would use a database

class Book {
  constructor() {
    this.books = [
      { id: 1, title: 'The Great Gatsby', author: 'F. Scott Fitzgerald', year: 1925 },
      { id: 2, title: 'To Kill a Mockingbird', author: 'Harper Lee', year: 1960 },
      { id: 3, title: '1984', author: 'George Orwell', year: 1949 }
    ];
    this.nextId = 4;
  }
  
  findAll() {
    return Promise.resolve([...this.books]);
  }
  
  findById(id) {
    const book = this.books.find(book => book.id === parseInt(id));
    return Promise.resolve(book || null);
  }
  
  create(bookData) {
    const newBook = {
      id: this.nextId++,
      ...bookData
    };
    this.books.push(newBook);
    return Promise.resolve(newBook);
  }
  
  update(id, bookData) {
    const index = this.books.findIndex(book => book.id === parseInt(id));
    if (index === -1) {
      return Promise.resolve(null);
    }
    
    const updatedBook = {
      ...this.books[index],
      ...bookData
    };
    this.books[index] = updatedBook;
    return Promise.resolve(updatedBook);
  }
  
  delete(id) {
    const index = this.books.findIndex(book => book.id === parseInt(id));
    if (index === -1) {
      return Promise.resolve(false);
    }
    
    this.books.splice(index, 1);
    return Promise.resolve(true);
  }
}

// Export a singleton instance
module.exports = new Book();
  </CodeBlock>
  
  <h2>Create a Controller</h2>
  
  <p>
    Now, let's create a controller to handle the business logic:
  </p>
  
  <CodeBlock language="javascript" title="src/controllers/books.controller.js">
const Book = require('../models/book.model');

class BooksController {
  // Get all books
  async getAllBooks(req, res) {
    try {
      const books = await Book.findAll();
      res.json(books);
    } catch (error) {
      res.status(500).json({ error: 'Failed to retrieve books' });
    }
  }
  
  // Get a single book by ID
  async getBookById(req, res) {
    try {
      const book = await Book.findById(req.params.id);
      if (!book) {
        return res.status(404).json({ error: 'Book not found' });
      }
      res.json(book);
    } catch (error) {
      res.status(500).json({ error: 'Failed to retrieve book' });
    }
  }
  
  // Create a new book
  async createBook(req, res) {
    try {
      const { title, author, year } = req.body;
      
      // Validate input
      if (!title || !author) {
        return res.status(400).json({ error: 'Title and author are required' });
      }
      
      const newBook = await Book.create({ title, author, year });
      res.status(201).json(newBook);
    } catch (error) {
      res.status(500).json({ error: 'Failed to create book' });
    }
  }
  
  // Update a book
  async updateBook(req, res) {
    try {
      const { title, author, year } = req.body;
      const updatedBook = await Book.update(req.params.id, { title, author, year });
      
      if (!updatedBook) {
        return res.status(404).json({ error: 'Book not found' });
      }
      
      res.json(updatedBook);
    } catch (error) {
      res.status(500).json({ error: 'Failed to update book' });
    }
  }
  
  // Delete a book
  async deleteBook(req, res) {
    try {
      const result = await Book.delete(req.params.id);
      
      if (!result) {
        return res.status(404).json({ error: 'Book not found' });
      }
      
      res.status(204).send();
    } catch (error) {
      res.status(500).json({ error: 'Failed to delete book' });
    }
  }
}

module.exports = new BooksController();
  </CodeBlock>
  
  <h2>Set Up Routes</h2>
  
  <p>
    Finally, let's set up the routes to connect our API endpoints to the controller:
  </p>
  
  <CodeBlock language="javascript" title="src/routes/books.routes.js">
const { Router } = require('frame-api');
const BooksController = require('../controllers/books.controller');

const router = Router();

// Define routes
router.get('/books', BooksController.getAllBooks);
router.get('/books/:id', BooksController.getBookById);
router.post('/books', BooksController.createBook);
router.put('/books/:id', BooksController.updateBook);
router.delete('/books/:id', BooksController.deleteBook);

module.exports = router;
  </CodeBlock>
  
  <h2>Run the Application</h2>
  
  <p>
    Now that we've set up all the components, let's run our application:
  </p>
  
  <CodeBlock language="bash">
npm run dev
  </CodeBlock>
  
  <p>
    Your API should now be running at <code>http://localhost:3000/api/books</code>.
  </p>
  
  <h2>Testing the API</h2>
  
  <p>
    You can test your API using tools like curl, Postman, or any HTTP client. Here are some example requests:
  </p>
  
  <h3>Get all books</h3>
  
  <CodeBlock language="bash">
curl http://localhost:3000/api/books
  </CodeBlock>
  
  <h3>Get a single book</h3>
  
  <CodeBlock language="bash">
curl http://localhost:3000/api/books/1
  </CodeBlock>
  
  <h3>Create a new book</h3>
  
  <CodeBlock language="bash">
curl -X POST http://localhost:3000/api/books \
  -H "Content-Type: application/json" \
  -d '{"title":"The Hobbit","author":"J.R.R. Tolkien","year":1937}'
  </CodeBlock>
  
  <h3>Update a book</h3>
  
  <CodeBlock language="bash">
curl -X PUT http://localhost:3000/api/books/1 \
  -H "Content-Type: application/json" \
  -d '{"title":"The Great Gatsby","author":"F. Scott Fitzgerald","year":1925}'
  </CodeBlock>
  
  <h3>Delete a book</h3>
  
  <CodeBlock language="bash">
curl -X DELETE http://localhost:3000/api/books/1
  </CodeBlock>
  
  <h2>Next Steps</h2>
  
  <p>
    Congratulations! You've built a simple API with FrameAPI. Here are some next steps to enhance your application:
  </p>
  
  <ul>
    <li>Connect to a real database instead of using an in-memory store</li>
    <li>Add authentication and authorization</li>
    <li>Implement input validation using a schema validation library</li>
    <li>Add pagination for the list endpoint</li>
    <li>Write tests for your API</li>
  </ul>
  
  <p>
    Check out the following documentation to learn more about these topics:
  </p>
  
  <ul>
    <li><a href="/docs/database">Database Integration</a></li>
    <li><a href="/docs/authentication">Authentication</a></li>
    <li><a href="/docs/validation">Validation</a></li>
    <li><a href="/docs/testing">Testing</a></li>
  </ul>
  
  <div class="mt-8 flex justify-between">
    <a href="/docs/installation" class="text-primary-500 hover:text-primary-600 flex items-center">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M9.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L7.414 9H15a1 1 0 110 2H7.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd" />
      </svg>
      Installation
    </a>
    <a href="/docs/configuration" class="text-primary-500 hover:text-primary-600 flex items-center">
      Configuration
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
      </svg>
    </a>
  </div>
</DocsLayout>