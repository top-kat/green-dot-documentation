---
import DocsLayout from '../../layouts/DocsLayout.astro';
import CodeBlock from '../../components/CodeBlock.astro';
---

<DocsLayout title="Installation" currentPage="/docs/installation">
  <h1>Installation</h1>
  
  <p class="lead text-lg text-neutral-600 dark:text-neutral-400 mb-8">
    Getting started with FrameAPI is straightforward. This guide will walk you through the installation process.
  </p>
  
  <h2>Prerequisites</h2>
  
  <p>
    Before installing FrameAPI, make sure you have the following installed on your system:
  </p>
  
  <ul>
    <li>Node.js (version 14 or later)</li>
    <li>npm (usually comes with Node.js) or yarn</li>
  </ul>
  
  <p>
    You can check your Node.js version by running:
  </p>
  
  <CodeBlock language="bash">
node --version
  </CodeBlock>
  
  <h2>Creating a New Project</h2>
  
  <p>
    The easiest way to get started with FrameAPI is to use our CLI tool to create a new project:
  </p>
  
  <CodeBlock language="bash">
# Using npm
npm create frame-api@latest my-api-project

# Using yarn
yarn create frame-api my-api-project
  </CodeBlock>
  
  <p>
    This will create a new directory with the specified name and scaffold a basic FrameAPI project structure.
  </p>
  
  <h2>Manual Installation</h2>
  
  <p>
    If you prefer to set up your project manually, you can install FrameAPI in an existing project:
  </p>
  
  <CodeBlock language="bash">
# Using npm
npm install frame-api

# Using yarn
yarn add frame-api
  </CodeBlock>
  
  <p>
    After installing, you'll need to create the basic project structure yourself. Here's a recommended structure:
  </p>
  
  <CodeBlock language="text">
my-api-project/
├── src/
│   ├── controllers/
│   ├── models/
│   ├── routes/
│   ├── middleware/
│   ├── services/
│   └── app.js
├── tests/
├── .env
├── .env.example
├── .gitignore
├── package.json
└── README.md
  </CodeBlock>
  
  <h2>Basic Configuration</h2>
  
  <p>
    Once you have installed FrameAPI, you need to create a basic application setup. Here's how to do that:
  </p>
  
  <CodeBlock language="javascript" title="src/app.js">
const { createServer } = require('frame-api');

// Create a new application
const app = createServer();

// Set up middleware
app.use(require('frame-api/middleware/cors'));
app.use(require('frame-api/middleware/bodyParser').json());
app.use(require('frame-api/middleware/compression')());

// Define a simple route
app.get('/', (req, res) => {
  res.json({ message: 'Welcome to FrameAPI!' });
});

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
  </CodeBlock>
  
  <h2>Environment Variables</h2>
  
  <p>
    It's a good practice to use environment variables for configuration. Create a <code>.env</code> file in your project root:
  </p>
  
  <CodeBlock language="text" title=".env">
# Application
PORT=3000
NODE_ENV=development

# Database
DB_HOST=localhost
DB_PORT=5432
DB_NAME=myapp
DB_USER=username
DB_PASSWORD=password

# Security
JWT_SECRET=your-secret-key
  </CodeBlock>
  
  <p>
    Also create a <code>.env.example</code> file with the same structure but without the actual values, to serve as a template for other developers.
  </p>
  
  <h2>Starting the Development Server</h2>
  
  <p>
    To start the development server, you can add a script to your <code>package.json</code>:
  </p>
  
  <CodeBlock language="json" title="package.json (scripts section)">
"scripts": {
  "dev": "nodemon src/app.js",
  "start": "node src/app.js",
  "test": "jest"
}
  </CodeBlock>
  
  <p>
    Then, you can run the development server with:
  </p>
  
  <CodeBlock language="bash">
npm run dev

# or with yarn
yarn dev
  </CodeBlock>
  
  <h2>Verification</h2>
  
  <p>
    To verify that your installation is working, open your browser or use a tool like curl to access your API:
  </p>
  
  <CodeBlock language="bash">
curl http://localhost:3000
  </CodeBlock>
  
  <p>
    You should see a JSON response with the message: <code>{ "message": "Welcome to FrameAPI!" }</code>
  </p>
  
  <h2>Next Steps</h2>
  
  <p>
    Now that you have installed FrameAPI, you can start building your application. Here are some resources to help you get started:
  </p>
  
  <ul>
    <li><a href="/docs/quick-start">Quick Start Guide</a> - Build a simple API in minutes</li>
    <li><a href="/docs/routing">Routing</a> - Learn how to define routes in your application</li>
    <li><a href="/docs/controllers">Controllers</a> - Organize your application logic</li>
    <li><a href="/docs/database">Database Access</a> - Connect to and use databases</li>
  </ul>
  
  <div class="mt-8 flex justify-between">
    <a href="/docs" class="text-primary-500 hover:text-primary-600 flex items-center">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M9.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L7.414 9H15a1 1 0 110 2H7.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd" />
      </svg>
      Introduction
    </a>
    <a href="/docs/quick-start" class="text-primary-500 hover:text-primary-600 flex items-center">
      Quick Start
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
      </svg>
    </a>
  </div>
</DocsLayout>